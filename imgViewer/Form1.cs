using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

//saba shengelia, ამ კოდს githubze ავტვირთავ

//whole code is basically here i am doing absolutely nothing in any of the other files

//i am willing to sacrifice 1-2 points for not going through everything and implementing exception handling everywhere
// i am fully (not (✿◡‿◡) ) confident that program wont crush


namespace imgViewer
{
    
    public partial class Form1 : Form
    {
        public static string[] args;

        //current directory, list of image paths and list of directories inside the current directory
        private string CurrDirectory;
        string[] CurrImageList;
        string[] CurrDirectoryList;

        //image that is currently loaded as main picture
        Image CurrentImage;

        //index inside the directory decides which picture is loaded
        private int index = 0;
        int Index_Saver; 

        //for slideshow button
        bool SlideShow_Toggle=false;

        //config file where it takes the default settings
        public string config="./StartUp.ini";
        public int[] Pair=new int[2];

        //for checkbox that decides if you can view all the images including in sub directories
        bool Recursive;

        //for checkbox that decides if index loops instead of just stopping at the last picture
        bool loop=false;

        //consturctor for form (this project uses autegenerated forms code)
        public Form1()
        {
            //if config file doesnt exist it must be created same with the resource directory which is by default starting directory
            if (!File.Exists("./StartUp.ini"))
            {
                File.Create("./StartUp.ini");
                
            }
            if (!Directory.Exists("./Resources"))
            {
                Directory.CreateDirectory("./Resources");
            }
            
            //reads the config file and passes them as default values for the program
            InitializeConfigFile();
            //for checking console arguments
            ConsoleCheck();
            


            

            //CurrDirectory = (@"F:\repos\imgViewer\imgViewer\resources");

            //sets the current image according to current directory during startup of the program
            set_CurrentImageList();
 
        



            //getting the subdirectorys
            CurrDirectoryList = Directory.GetDirectories(CurrDirectory);
            Console.WriteLine(CurrImageList[0]);

            //initializes autogenerated code for windows forms
            InitializeComponent();
            
            //setting current image according to index 
            Set_Current_Image(index);

            //defining picture box location
            pictureBox1.Location=new System.Drawing.Point(12,Size.Height/2 - CurrentImage.Height/2);

            //checkBox1.Check += new EventHandler(checkBox1_CheckedChanged);

            //adding subdirectories to a combobox for navigation
            comboBox1.Items.AddRange( CurrDirectoryList );

            //a function thats changes the current directory according to one chosen with combobox
            comboBox1.SelectedIndexChanged += new System.EventHandler(Directory_Change);

            //button click calling functions (pictures also work as next previous button )

            //prev.Click += new EventHandler(Prev_Click);
            pictureBox2.Click += new EventHandler(Prev_Click);
            //Next.Click += new EventHandler(Next_Click);
            pictureBox3.Click += new EventHandler(Next_Click);
            button3.Click += new EventHandler(SlideShow_toggle);
            

        }

        //function that sets current image
        void set_CurrentImageList(bool CheckRecursive=false)
        {
            if (CheckRecursive == true)
            {
                CurrImageList = Directory.GetFiles(CurrDirectory,"*",SearchOption.AllDirectories).Where(x => Path.GetExtension(x).ToLower() == ".jpg" ||
                Path.GetExtension(x).ToLower() == ".jpeg" ||
                Path.GetExtension(x).ToLower() == ".png" ).ToArray();
                return;
            }
            CurrImageList = Directory.GetFiles(CurrDirectory).Where(x => Path.GetExtension(x).ToLower() == ".jpg" ||
            Path.GetExtension(x).ToLower() == ".jpeg" ||
            Path.GetExtension(x).ToLower() == ".png").ToArray();
        }

        //function that takes console argument and sets default values using it
        public void ConsoleCheck()
        {
            if (args.Length==0)
            {
                return;
            }
            if (Directory.GetFiles(CurrDirectory).Where(x => Path.GetExtension(x).ToLower() == ".jpg" ||
                Path.GetExtension(x).ToLower() == ".jpeg" ||
                Path.GetExtension(x).ToLower() == ".png").Where(x=> x == args[0]).ToArray().Length==0)
            {
                CurrDirectory= Path.GetDirectoryName(args[0]);
                set_CurrentImageList();
                for (int i = 0; i < CurrImageList.Length; i++)
                {
                    if (CurrImageList[i].EndsWith(args[0]))
                    {
                        return;
                    }
                    index++;
                }
            }
            else
            {
                CurrDirectory = Path.GetDirectoryName(args[0]);
            }
        }

        // reads config file and sets default values using them
        public void InitializeConfigFile()
        {
            string [] temp = File.ReadAllLines("./StartUp.ini");
            string[] Temporary= temp[0].Split(':');
            CurrDirectory = Temporary[1];
            Temporary= temp[1].Split(':');
            string[] pair= Temporary[1].Split(',');
            Pair[0] = int.Parse(pair[0]);
            Pair[1] = int.Parse(pair[1]);
            Temporary = temp[2].Split(':');
            if (Temporary[1].ToLower() == "true")
            {
                loop = true;
            }
            else loop= false;
            
            Temporary = temp[3].Split(':');
            if (Temporary[1].ToLower() == "true")
            {
                Recursive = true;

            } Recursive = false;
        }

        //function that combobox calls to change the current directory
        public void Directory_Change(object sender, EventArgs e)
        {
            index = 0;
            string temp;
            temp = comboBox1.SelectedItem.ToString();
            if (temp == "..")
            {
                CurrDirectory = Directory.GetParent(CurrDirectory).FullName;
            }
            else { 
            CurrDirectory = temp;
            }
            set_CurrentImageList();
            CurrDirectoryList = Directory.GetDirectories(CurrDirectory);

            comboBox1.Items.Clear();
            comboBox1.Items.AddRange(new string[]{".."});
            comboBox1.Items.AddRange(CurrDirectoryList);
            Set_Current_Image(index);
        }


        // this is a function that sets a time interval for a slideshow, it recieves miliseconds and makes the program wait for that amount of time
        public void wait(int milliseconds)
        {
            var timer1 = new System.Windows.Forms.Timer();
            if (milliseconds == 0 || milliseconds < 0) return;

            
            timer1.Interval = milliseconds;
            timer1.Enabled = true;
            timer1.Start();

            timer1.Tick += (s, e) =>
            {
                timer1.Enabled = false;
                timer1.Stop();
               
            };

            while (timer1.Enabled)
            {
                Application.DoEvents();
            }
        }

        //sets the current image in the main picture box it also calls function to load next and previous preview images
        private void Set_Current_Image(int i)
        {
            //when the loop is on that means that when the index is on 0 last image must be loaded as preview
            //since my preview setting codes relied on substracting or adding one to index it breaks the code
            //since 0-1 gives -1 which will give out of bnounds exception index must
            //be equal to length + itself so when you subtract one and then take the %lenght from it it gives correct value
            //this is my way of dealing wiht loop issue instead of rewriting the whole code
            i = i%CurrImageList.Length;
            if(loop==true)i = CurrImageList.Length + i;
            
            

            //neither dispose nor  "=null" clear the memory without calling garbage collector (which is bad) by hand it has a memory leak
            pictureBox1.Image?.Dispose();
            pictureBox1.Image = null;
            GC.Collect();

            if (CurrImageList.Length == 0)// if the directory is empty there must be no pictures displayed,
            {//this is so that when you change to a directory that is empty picture boxes get cleared
                pictureBox3.Size = new System.Drawing.Size(0, 0);
                pictureBox3.Image = null;
                pictureBox2.Size = new System.Drawing.Size(0, 0);
                pictureBox2.Image = null;
                //pictureBox1.Size = new System.Drawing.Size(0, 0);
                pictureBox1.Image = null;
                return;
            }
            //set the current image
            CurrentImage = Image.FromFile(CurrImageList[i % CurrImageList.Length]);

            //it is a requirement that picture must not exceed certain size so this code accounts for that
            ///you can edit or remove bitmap operations here
            if (CurrentImage.Width > Pair[0] && CurrentImage.Height > Pair[1])
            {
                CurrentImage = new Bitmap(Image.FromFile(CurrImageList[i%CurrImageList.Length]), Pair[0], Pair[1]);
            }
            //pictureBox1.Image?.Dispose();
            //places current image in a picture box 
            pictureBox1.Image = CurrentImage;

            //calling preview picture box setting functions
            Set_next_Preview(i);
            Set_Previous_Preview(i);
        }

        //sets the previous picture preview according to main picture (basically takes index and substracts one and then sets that image form imagelist as previous)
        private void Set_next_Preview(int i)
        {
            
            
            //it was required that previews must be the 20% size of the main picture siplayed
            //you can edit or remove bitmap operations here

            if (i % CurrImageList.Length != CurrImageList.Length -1 || loop==true)
            {
                pictureBox3.Size= new System.Drawing.Size (CurrentImage.Width / 5, CurrentImage.Height / 5);
                pictureBox3.Image?.Dispose();
                GC.Collect();
                pictureBox3.Image = new Bitmap(Image.FromFile(CurrImageList[(i +1) % CurrImageList.Length]), CurrentImage.Width / 5, CurrentImage.Height / 5);
            }
            else
            {
                pictureBox3.Size = new System.Drawing.Size(0,0);
                pictureBox2.Image?.Dispose();
                pictureBox3.Image = null;
            }
        }
        //sets the next preview image
        private void Set_Previous_Preview(int i)
        {
            
            if ((i+ CurrImageList.Length) % CurrImageList.Length != 0 || loop==true)
            {
                pictureBox2.Size = new System.Drawing.Size(CurrentImage.Width / 5, CurrentImage.Height / 5);
                pictureBox2.Image?.Dispose();
                Console.WriteLine($"here index equals {i}");
                pictureBox2.Image = new Bitmap(Image.FromFile(CurrImageList[(i -1) % CurrImageList.Length]), CurrentImage.Width / 5, CurrentImage.Height / 5);
            }
            else
            {
                pictureBox2.Size = new System.Drawing.Size(0, 0);
                pictureBox2.Image?.Dispose();
                GC.Collect();
                pictureBox2.Image = null;
            }
        }


        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void pictureBox1_Click(object sender, EventArgs e)
        {

        }

        //this is whats being called on next button click it adds one to index and then calls set current image function  
        private void Next_Click(object sender, EventArgs e)
        {
            
            if (CurrImageList.Length -1 > index % CurrImageList.Length ||loop ==true)
            {
                index++;

                //Console.WriteLine(index);

                Set_Current_Image(index);
                
                //Set_next_Preview();
                //Set_Previous_Preview();
            }
            Console.WriteLine(index);
        }

        //same thing as above but for previous
        private void Prev_Click(object sender, EventArgs e)
        {
            
            if (index % CurrImageList.Length != 0 || loop == true)
            {
                index--;
                
                Set_Current_Image(index);
                
                //Set_next_Preview();
                //Set_Previous_Preview();
            }
            Console.WriteLine(index);
        }

        //toggles slideshow 
        private void SlideShow_toggle(object sender, EventArgs e)
        {
            //slideshow disables everything else while its running so this enables after its dont

            //i.. i dont remember how this part works exactly should have written the comments when i was writing this instead of one week after finishing this homework
            //i remember having some kind of problem here and i did something ugly to fix it
            //if something here doesnt make sense its because of that
            if (SlideShow_Toggle == true)
            {
                index = Index_Saver;
                Set_Current_Image(index);
                prev.Enabled = true;
                Next.Enabled = true;
                comboBox1.Enabled = true;
                SlideShow_Toggle = false;
                button3.Text = "Play";
                return;
            }
            SlideShow_Toggle = !SlideShow_Toggle;
            button3.Text = "Stop";

            prev.Enabled = false;
            Next.Enabled = false;
            comboBox1.Enabled=false;

            Index_Saver=index;
            index = 0;
            Set_Current_Image(index);
            for (int i = 0; i < CurrImageList.Length && SlideShow_Toggle!=false; i++)
            {
                wait(700);
                try
                {
                  Next_Click(sender, e);

                }
                catch(Exception ex)
                {
                    Console.WriteLine(ex.ToString());
                }
                if(checkBox1.Checked == true && i== CurrImageList.Length-1)
                {
                    
                    i = 0;
                }
            }
            index = Index_Saver;
            Set_Current_Image(index);
            prev.Enabled = true;
            Next.Enabled = true;
            comboBox1.Enabled = true;
            button3.Text = "Play";
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void label2_Click(object sender, EventArgs e)
        {

        }
        //the checkbox for recursive image search (meaning you load images from all subdirectories into the current image list)

        // there isnt anything actually recursive here (^_~)
        // except for that one function from included library that i use somewhere that searches through subdirectories recursivly apparently
        // dont quote me on that (◔◡◔)

        // actaul logic of adding to current image list is accounted for in the set imagelist function
        private void checkBox2_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox2.Checked == true)
            {

                


                // i love when i completely forget that i created a boolean variable for this exact purpose
                // then added a boolean value to a function argument
                //instead changing boolean variable here and using it in function without using arguments (⊙﹏⊙∥)


                set_CurrentImageList(true);
                Set_Current_Image(index);
            }
            else
            {
                //CurrImageList = Directory.GetFiles(CurrDirectory, "*.JPG");
                set_CurrentImageList();
                //index++;
                Set_Current_Image(index);
            }
        }

        //if this is checked loop is on, imagelist looping is accounted for in the set image function in the same way recursion searching was 
        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {

            if (checkBox1.Checked == true)
            {
                loop = true;
                Set_Current_Image(index);
            }
            else
            {
                loop = false;
                //Set_Previous_Preview(index);
                //Set_next_Preview(index);
               
                Set_Current_Image(index);
            }
            

        }

        
    }
}
